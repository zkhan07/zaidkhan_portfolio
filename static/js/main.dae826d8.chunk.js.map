{"version":3,"sources":["components/Card.js","components/Dashboard.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","className","href","useStyles","makeStyles","theme","root","display","appBar","backgroundColor","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","position","whiteSpace","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","container","paddingTop","paddingLeft","paddingBottom","contentShift","PersistentDrawerLeft","classes","useTheme","React","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","src","to","Drawer","anchor","paper","direction","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","appBarSpacer","Container","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dae826d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Style.css\";\r\n\r\n\r\nconst Card = () => {\r\n    return(\r\n        <div className=\"cardcon\">\r\n\r\n\r\n          \r\n            <div className=\"ui fluid container\">\r\n                {/* <div className=\"ui small circular  image\">\r\n                    <img className=\"img1\" src=\"cv.jpg\" />\r\n                </div> */}\r\n                <h1 className=\"cardhead\">Hi, I'm Zaid</h1>\r\n                <p className=\"cardpara\">I m freelance web developer specialized in front-end and also back-end and a web development.</p>\r\n                <p className=\"cardpara1\">Get in touch</p>\r\n                <i className=\"yellow big mail icon i1\"></i>\r\n                <i className=\"green big linkedin icon i2\"></i>\r\n                <i className=\"yellow big github icon i3\"></i>\r\n                <i className=\"green big facebook icon i4\"></i>\r\n                <i className=\"yellow big twitter icon i5\"></i>\r\n                <a href=\"/portfolio\"><button className=\"ui big green basic button cardbtn1\">PORTFOLIO</button></a>\r\n                <a href=\"/myoffer\"><button className=\"ui big yellow basic button cardbtn2\">MY OFFER</button></a>\r\n\r\n\r\n           \r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n      backgroundColor: \"black\",\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n\r\n  drawerPaper: {\r\n    position: \"fixed\",\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 0,\r\n    padding: theme.spacing(0),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n\r\n \r\n  container: {\r\n    paddingTop: theme.spacing(0),\r\n    paddingLeft: theme.spacing(0),\r\n    paddingBottom: theme.spacing(0),\r\n  },\r\n\r\n\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n\r\n              <div className=\"ui mini circular image\">\r\n                  <img src=\"zaid.png\" />\r\n              </div>\r\n\r\n            <Link to=\"/\">\r\n                ZAID KHAN\r\n            </Link>\r\n          </Typography>\r\n\r\n\r\n  \r\n     \r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n       \r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/\">\r\n                <ListItemText primary=\"Dashborad\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/portfolio\">\r\n                <ListItemText primary=\"Portfolio\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/myoffer\">\r\n                <ListItemText primary=\"My Offer\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/mycontact\">\r\n                <ListItemText primary=\"My Contact\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n      \r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/mycv\">\r\n                <ListItemText primary=\"My CV\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/mytechtalks\">\r\n                <ListItemText primary=\"My Techtalks\" />\r\n                </Link>\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <MessageIcon />\r\n                </ListItemIcon>\r\n                <Link to=\"/myblog\">\r\n                <ListItemText primary=\"Personal Blog\" />\r\n                </Link>\r\n            </ListItem>\r\n            <br/>\r\n\r\n            <a href=\"#\"><i className=\"big mail black icon\"></i></a>\r\n            <a href=\"#\"><i className=\"big facebook black icon\"></i></a>\r\n            <a href=\"#\"><i className=\"big github black icon\"></i></a>\r\n            <a href=\"#\"><i className=\"big twitter black icon\"></i></a>\r\n            <a href=\"#\"><i className=\"big linkedin black icon\"></i></a>\r\n            <a href=\"#\"><i className=\"big whatsapp black icon\"></i></a>\r\n\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n\r\n        <Card />\r\n\r\n\r\n          \r\n       \r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n// import {BrowserRouter, Route} from \"react-router-dom\";\r\n\r\nimport Dashboard from \"./Dashboard\";\r\n// import DashPortfolio from \"./DashPortfolio\";\r\n// import DashOffer from \"./DashOffer\";\r\n// import DashContact from \"./DashContact\";\r\n// import DashMycv from \"./DashMycv\";\r\n// import DashTechtalks from \"./DashTechtalks\";\r\n// import DashBlog from \"./DashBlog\";\r\nimport \"./Style.css\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n\r\n        <Dashboard />\r\n\r\n        {/* <BrowserRouter>\r\n        <Route exact path=\"/\" component={Dashboard}/>\r\n        <Route exact path=\"/portfolio\" component={DashPortfolio}/>\r\n        <Route exact path=\"/myoffer\" component={DashOffer}/>\r\n        <Route exact path=\"/mycontact\" component={DashContact}/>\r\n        <Route exact path=\"/mycv\" component={DashMycv}/>\r\n        <Route exact path=\"/mytechtalks\" component={DashTechtalks}/>\r\n        <Route exact path=\"/myblog\" component={DashBlog}/>\r\n        </BrowserRouter>, */}\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}